{"version":3,"sources":["components/DriveDetails.js","components/Search.js","Routes.js","components/NavBar.js","App.js","index.js"],"names":["LIST_API_URL","DEFAULT_SHARE_EMAIL","LOCAL_STORE_SELECTED_GDRIVE_ITEM_ID","LOCAL_STORE_SELECTED_GDRIVE_ITEM_NAME","DriveDetails","useState","transformedList","setTransformedList","open","setOpen","handleDialogClose","useEffect","a","fetch","response","json","getList","then","DataTreeView","treeItems","TreeView","defaultCollapseIcon","defaultExpandIcon","getTreeItemsFromData","map","treeItemData","children","undefined","nodes","length","TreeItem","nodeId","id","label","text","onLabelClick","e","preventDefault","localStorage","setItem","handleNodeSelect","Grid","container","spacing","className","item","xs","Button","variant","color","onClick","style","marginTop","getItem","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","file","console","log","res","data","message","alert","autoFocus","useStyles","makeStyles","table","minWidth","maxWidth","Routes","path","sidebarName","component","searchTerm","setSearchTerm","searchResult","setSearchResult","classes","TextField","onChange","target","value","search","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","type","theme","createStyles","root","flexGrow","menuButton","marginRight","title","drawer","width","fullList","withRouter","props","isOpen","setIsOpen","toggleDrawer","event","key","AppBar","position","Toolbar","IconButton","edge","Typography","Drawer","paper","role","onKeyDown","MenuList","prop","to","textDecoration","MenuItem","selected","routeName","location","pathname","ListItemText","primary","App","route","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e643b88.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport Button from '@material-ui/core/Button';\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid} from \"@material-ui/core\";\n\nconst LIST_API_URL = 'http://localhost:8080/api/v1/list';\nconst SHARE_API_URL = 'http://localhost:8080/api/v1/change-owner';\nconst DEFAULT_SHARE_EMAIL = 'interviewtest2.m@gmail.com';\n\nconst LOCAL_STORE_SELECTED_GDRIVE_ITEM_ID = 'gdrive-file-selected-id';\nconst LOCAL_STORE_SELECTED_GDRIVE_ITEM_NAME = 'gdrive-file-selected-name';\n\nconst DriveDetails = () => {\n    let [transformedList, setTransformedList] = useState([]);\n    let [open, setOpen] = useState(false);\n\n    const handleDialogOpen = () => {\n        setOpen(true);\n    };\n\n    const handleDialogClose = () => {\n        setOpen(false);\n    };\n\n    useEffect(() => {\n        async function getList() {\n            const response = await fetch(LIST_API_URL)\n            return await response.json();\n        }\n\n        getList().then((json) => {\n            setTransformedList(json);\n        });\n    }, []);\n\n    // Create a TreeView using treeItems data passed in. This is the JSON data\n    const DataTreeView = ({treeItems}) => {\n        return (\n            <TreeView\n                defaultCollapseIcon={<ExpandMoreIcon/>}\n                defaultExpandIcon={<ChevronRightIcon/>}\n            >\n                {getTreeItemsFromData(treeItems)}\n            </TreeView>\n        );\n    };\n\n    // NOTE: TreeView component has a bug where it does not allow state to be set within the handler of\n    // onNodeSelect(), hence this hack of using local storage. We can add TTL on the local storage set/get to\n    // avoid firing transfer owner on a previously selected (hence stored) value.\n    const handleNodeSelect = (e, id, text) => {\n        e.preventDefault();\n\n        localStorage.setItem(LOCAL_STORE_SELECTED_GDRIVE_ITEM_ID, id);\n        localStorage.setItem(LOCAL_STORE_SELECTED_GDRIVE_ITEM_NAME, text);\n    }\n\n    const handleShare = () => {\n        const file = localStorage.getItem(LOCAL_STORE_SELECTED_GDRIVE_ITEM_ID);\n\n        console.log('sharing file ' + file);\n\n        const transferOwner = () => {\n            fetch(`${SHARE_API_URL}?id=${file}&new-owner-email=${DEFAULT_SHARE_EMAIL}`)\n                .then((res) => {\n                    return res.json();\n                })\n                .then((data) => {\n                    console.log(data.message);\n                    alert(data.message);\n                });\n        }\n\n        transferOwner();\n        handleDialogClose();\n    }\n\n    // Function to massage the data and create treeItems out of it\n    const getTreeItemsFromData = treeItems => {\n        return treeItems.map(treeItemData => {\n            let children = undefined;\n\n            if (treeItemData.nodes && treeItemData.nodes.length > 0) {\n                children = getTreeItemsFromData(treeItemData.nodes);\n            }\n\n            return (\n                <TreeItem\n                    key={treeItemData.id}\n                    nodeId={treeItemData.id}\n                    label={treeItemData.text}\n                    children={children}\n                    onLabelClick={(e) => handleNodeSelect(e, treeItemData.id, treeItemData.text)}\n                />\n            );\n        });\n    };\n\n    return (\n        <Grid container spacing={3} className=\"TreeView\">\n            <Grid item xs={6}>\n                <DataTreeView treeItems={transformedList}/>\n\n                {/*  TRANSFER OWNERSHIP UI  */}\n                <Button variant=\"contained\" color=\"primary\" onClick={handleDialogOpen} style={{marginTop: 20}}>\n                    Transfer ownership\n                </Button>\n\n                {localStorage.getItem(LOCAL_STORE_SELECTED_GDRIVE_ITEM_ID) && <Dialog\n                    open={open}\n                    onClose={handleDialogClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-title\">{\"Transfer ownership?\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-description\">\n                            {`The ownership of ${localStorage.getItem(LOCAL_STORE_SELECTED_GDRIVE_ITEM_NAME)}\n                            will be transferred to ${DEFAULT_SHARE_EMAIL}. You will\n                            still have the writer permissions on the file. Do you want to continue?`}\n                        </DialogContentText>\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button onClick={handleDialogClose} color=\"primary\">\n                            Cancel\n                        </Button>\n\n                        <Button onClick={handleShare} color=\"primary\" autoFocus>\n                            Continue\n                        </Button>\n                    </DialogActions>\n                </Dialog>}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default DriveDetails;","import React, {useState} from 'react'\nimport Button from \"@material-ui/core/Button\";\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 250,\n        maxWidth: 500\n    },\n});\n\nconst Search = () => {\n    let [searchTerm, setSearchTerm] = useState(null);\n    let [searchResult, setSearchResult] = useState(null);\n\n    const updateTerm = (e) => {\n        setSearchTerm(e.target.value);\n    }\n\n    const handleSearch = () => {\n        async function search() {\n            if (searchTerm) {\n                const response = await fetch(`http://localhost:8080/api/v1/search?query=${searchTerm}`);\n                return await response.json();\n            }\n        }\n\n        search().then((json) => {\n            setSearchResult(json);\n        });\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div className=\"SearchPage\">\n            <TextField id=\"standard-basic\" label=\"Search Query\" onChange={updateTerm}/>\n\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>\n                Search\n            </Button>\n\n            {searchResult &&\n\n            <TableContainer component={Paper} className=\"SearchResultTable\">\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                        </TableRow>\n                    </TableHead>\n\n                    <TableBody>\n                        {searchResult.map((row) => (\n                            <TableRow key={row.text}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.text}\n                                </TableCell>\n                                <TableCell align=\"right\">{row.type}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            }\n        </div>\n    )\n}\n\nexport default Search;","import DriveDetails from \"./components/DriveDetails\";\nimport Search from \"./components/Search\";\n\n// Contains routes for all the pages\nconst Routes = [\n    {\n        path: '/',\n        sidebarName: 'Browse Drive',\n        component: DriveDetails\n    },\n    {\n        path: '/search',\n        sidebarName: 'Search',\n        component: Search\n    }\n];\n\nexport default Routes;","import React, { useState } from 'react';\n\nimport { NavLink, withRouter } from 'react-router-dom';\nimport Routes from '../Routes'\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport {\n    AppBar,\n    Toolbar,\n    Typography,\n    IconButton,\n    Drawer,\n    MenuList,\n    MenuItem,\n    ListItemText,\n} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n        },\n        title: {\n            flexGrow: 1,\n        },\n        drawer: {\n            width: 300,\n        },\n        fullList: {\n            width: 'auto',\n        },\n    }),\n);\n\nconst NavBar = (props) => {\n    const classes = useStyles();\n    const [isOpen, setIsOpen] = useState(false);\n    const toggleDrawer = (open) => (event) => {\n        if (\n            event.type === 'keydown' &&\n            (event.key === 'Tab' || (event.key === 'Shift'))) {\n            return;\n        }\n\n        setIsOpen(open);\n    };\n\n    const activeRoute = (routeName) => {\n        return props.location.pathname === routeName ? true : false;\n    }\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Google Drive Sharing App\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n            </div>\n\n            <Drawer classes={{ paper: classes.drawer }} open={isOpen} onClose={toggleDrawer(false)}>\n                <div\n                    className={classes.fullList}\n                    role=\"presentation\"\n                    onClick={toggleDrawer(false)}\n                    onKeyDown={toggleDrawer(false)}\n                >\n                    <MenuList>\n                        {Routes.map((prop, key) => {\n                            return (\n                                <NavLink to={prop.path} style={{ textDecoration: 'none' }} key={key}>\n                                    <MenuItem selected={activeRoute(prop.path)}>\n                                        <ListItemText primary={prop.sidebarName} />\n                                    </MenuItem>\n                                </NavLink>\n                            );\n                        })}\n                    </MenuList>\n                </div>\n            </Drawer>\n        </div>\n    );\n};\n\nexport default withRouter(NavBar);","import './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Routes from './Routes'\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n      <div>\n          <NavBar />\n\n          <Switch>\n              {Routes.map((route) => (\n                  <Route exact path={route.path} key={route.path}>\n                      <route.component />\n                  </Route>\n              ))}\n          </Switch>\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}